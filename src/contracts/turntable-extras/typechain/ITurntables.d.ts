/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ITurntablesInterface extends ethers.utils.Interface {
  functions: {
    "turntableLength()": FunctionFragment;
    "charge(uint256,uint256)": FunctionFragment;
    "claimedOf(uint256)": FunctionFragment;
    "addType(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "claimableOf(uint256)": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "typeCount()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "allowType(uint256)": FunctionFragment;
    "accumulativeOf(uint256)": FunctionFragment;
    "destroy(uint256)": FunctionFragment;
    "denyType(uint256)": FunctionFragment;
    "types(uint256)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "turntables(uint256)": FunctionFragment;
    "pid()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "turntableLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addType",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "typeCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accumulativeOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "denyType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "types", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "turntables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "turntableLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulativeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "denyType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "types", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "turntables", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;

  events: {
    "AddType(uint256,uint256,uint256,uint256)": EventFragment;
    "AllowType(uint256)": EventFragment;
    "DenyType(uint256)": EventFragment;
    "ChangeChargingEfficiency(uint256)": EventFragment;
    "Buy(address,uint256)": EventFragment;
    "Charge(address,uint256,uint256)": EventFragment;
    "Destroy(address,uint256)": EventFragment;
    "Distribute(address,uint256)": EventFragment;
    "Claim(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DenyType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeChargingEfficiency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Destroy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
}

export class ITurntables extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ITurntablesInterface;

  functions: {
    turntableLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "turntableLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "charge(uint256,uint256)"(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimedOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addType(uint256,uint256,uint256,uint256)"(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "exists(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimableOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalVolume()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    typeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "typeCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256[])"(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "accumulativeOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "destroy(uint256)"(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    denyType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "denyType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    types(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    "types(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    buy(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    turntables(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    "turntables(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pid()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

  "turntableLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  charge(
    turntableId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "charge(uint256,uint256)"(
    turntableId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimedOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimedOf(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addType(
    price: BigNumberish,
    destroyReturn: BigNumberish,
    volume: BigNumberish,
    lifetime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addType(uint256,uint256,uint256,uint256)"(
    price: BigNumberish,
    destroyReturn: BigNumberish,
    volume: BigNumberish,
    lifetime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exists(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exists(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimableOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableOf(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  "totalVolume()"(overrides?: CallOverrides): Promise<BigNumber>;

  typeCount(overrides?: CallOverrides): Promise<BigNumber>;

  "typeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "ownerOf(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    turntableIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256[])"(
    turntableIds: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowType(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowType(uint256)"(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  accumulativeOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accumulativeOf(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  destroy(
    turntableId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "destroy(uint256)"(
    turntableId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  denyType(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "denyType(uint256)"(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  types(
    typeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      destroyReturn: BigNumber;
      volume: BigNumber;
      lifetime: BigNumber;
    }
  >;

  "types(uint256)"(
    typeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      destroyReturn: BigNumber;
      volume: BigNumber;
      lifetime: BigNumber;
    }
  >;

  buy(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  turntables(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      typeId: BigNumber;
      endBlock: BigNumber;
      lastClaimedBlock: BigNumber;
    }
  >;

  "turntables(uint256)"(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      typeId: BigNumber;
      endBlock: BigNumber;
      lastClaimedBlock: BigNumber;
    }
  >;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  "pid()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

    "turntableLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "charge(uint256,uint256)"(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addType(uint256,uint256,uint256,uint256)"(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exists(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVolume()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "typeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "ownerOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claim(uint256[])"(
      turntableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowType(typeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "allowType(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroy(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "destroy(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    denyType(typeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "denyType(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    types(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    "types(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    buy(typeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "buy(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turntables(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    "turntables(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AddType(
      price: null,
      destroyReturn: null,
      volume: null,
      lifetime: null
    ): EventFilter;

    AllowType(typeId: BigNumberish | null): EventFilter;

    DenyType(typeId: BigNumberish | null): EventFilter;

    ChangeChargingEfficiency(value: null): EventFilter;

    Buy(owner: string | null, turntableId: BigNumberish | null): EventFilter;

    Charge(
      owner: string | null,
      turntableId: BigNumberish | null,
      amount: null
    ): EventFilter;

    Destroy(
      owner: string | null,
      turntableId: BigNumberish | null
    ): EventFilter;

    Distribute(by: string | null, distributed: null): EventFilter;

    Claim(turntableId: BigNumberish | null, claimed: null): EventFilter;
  };

  estimateGas: {
    turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

    "turntableLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "charge(uint256,uint256)"(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addType(uint256,uint256,uint256,uint256)"(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exists(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    "totalVolume()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    "typeCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(uint256[])"(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowType(typeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "allowType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "destroy(uint256)"(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    denyType(typeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "denyType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    types(typeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "types(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(typeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "buy(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    turntables(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "turntables(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    "pid()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    turntableLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "turntableLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "charge(uint256,uint256)"(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimedOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addType(uint256,uint256,uint256,uint256)"(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalVolume()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "typeCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256[])"(
      turntableIds: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accumulativeOf(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "destroy(uint256)"(
      turntableId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    denyType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "denyType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    types(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "types(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    turntables(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "turntables(uint256)"(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
