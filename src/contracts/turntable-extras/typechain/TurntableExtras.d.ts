/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TurntableExtrasInterface extends ethers.utils.Interface {
  functions: {
    "turntables()": FunctionFragment;
    "extras(uint256)": FunctionFragment;
    "set(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "turntables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extras",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "turntables", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extras", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;

  events: {
    "Set(uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
}

export class TurntableExtras extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TurntableExtrasInterface;

  functions: {
    turntables(overrides?: CallOverrides): Promise<[string]>;

    "turntables()"(overrides?: CallOverrides): Promise<[string]>;

    extras(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "extras(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,string)"(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  turntables(overrides?: CallOverrides): Promise<string>;

  "turntables()"(overrides?: CallOverrides): Promise<string>;

  extras(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "extras(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    turntableId: BigNumberish,
    extra: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,string)"(
    turntableId: BigNumberish,
    extra: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    turntables(overrides?: CallOverrides): Promise<string>;

    "turntables()"(overrides?: CallOverrides): Promise<string>;

    extras(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "extras(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      turntableId: BigNumberish,
      extra: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,string)"(
      turntableId: BigNumberish,
      extra: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Set(
      turntableId: BigNumberish | null,
      owner: string | null,
      extra: null
    ): EventFilter;
  };

  estimateGas: {
    turntables(overrides?: CallOverrides): Promise<BigNumber>;

    "turntables()"(overrides?: CallOverrides): Promise<BigNumber>;

    extras(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "extras(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,string)"(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    turntables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "turntables()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extras(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extras(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,string)"(
      turntableId: BigNumberish,
      extra: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
