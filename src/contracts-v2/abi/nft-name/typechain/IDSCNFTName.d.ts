/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDSCNFTNameInterface extends ethers.utils.Interface {
  functions: {
    "mixForChanging()": FunctionFragment;
    "exists(string)": FunctionFragment;
    "V1()": FunctionFragment;
    "mixForDeleting()": FunctionFragment;
    "remove(address,uint256)": FunctionFragment;
    "named(address,uint256)": FunctionFragment;
    "names(address,uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "set(address,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mixForChanging",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [string]): string;
  encodeFunctionData(functionFragment: "V1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mixForDeleting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "named",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "names",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "mixForChanging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "V1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mixForDeleting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "named", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;

  events: {
    "SetMixForChanging(uint256)": EventFragment;
    "SetMixForDeleting(uint256)": EventFragment;
    "Set(address,uint256,address,string)": EventFragment;
    "Remove(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetMixForChanging"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMixForDeleting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Remove"): EventFragment;
}

export class IDSCNFTName extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDSCNFTNameInterface;

  functions: {
    mixForChanging(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mixForChanging()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exists(name: string, overrides?: CallOverrides): Promise<[boolean]>;

    "exists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    V1(overrides?: CallOverrides): Promise<[string]>;

    "V1()"(overrides?: CallOverrides): Promise<[string]>;

    mixForDeleting(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mixForDeleting()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    remove(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    named(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "named(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    names(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { name: string }>;

    "names(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { name: string }>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    set(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(address,uint256,string)"(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  mixForChanging(overrides?: CallOverrides): Promise<BigNumber>;

  "mixForChanging()"(overrides?: CallOverrides): Promise<BigNumber>;

  exists(name: string, overrides?: CallOverrides): Promise<boolean>;

  "exists(string)"(name: string, overrides?: CallOverrides): Promise<boolean>;

  V1(overrides?: CallOverrides): Promise<string>;

  "V1()"(overrides?: CallOverrides): Promise<string>;

  mixForDeleting(overrides?: CallOverrides): Promise<BigNumber>;

  "mixForDeleting()"(overrides?: CallOverrides): Promise<BigNumber>;

  remove(
    nft: string,
    mateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove(address,uint256)"(
    nft: string,
    mateId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  named(
    nft: string,
    mateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "named(address,uint256)"(
    nft: string,
    mateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  names(
    nft: string,
    mateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "names(address,uint256)"(
    nft: string,
    mateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  set(
    nft: string,
    mateId: BigNumberish,
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(address,uint256,string)"(
    nft: string,
    mateId: BigNumberish,
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    mixForChanging(overrides?: CallOverrides): Promise<BigNumber>;

    "mixForChanging()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(name: string, overrides?: CallOverrides): Promise<boolean>;

    "exists(string)"(name: string, overrides?: CallOverrides): Promise<boolean>;

    V1(overrides?: CallOverrides): Promise<string>;

    "V1()"(overrides?: CallOverrides): Promise<string>;

    mixForDeleting(overrides?: CallOverrides): Promise<BigNumber>;

    "mixForDeleting()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    named(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "named(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    names(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "names(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    set(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(address,uint256,string)"(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetMixForChanging(_mix: null): EventFilter;

    SetMixForDeleting(_mix: null): EventFilter;

    Set(
      nft: string | null,
      mateId: BigNumberish | null,
      owner: string | null,
      name: null
    ): EventFilter;

    Remove(
      nft: string | null,
      mateId: BigNumberish | null,
      owner: string | null
    ): EventFilter;
  };

  estimateGas: {
    mixForChanging(overrides?: CallOverrides): Promise<BigNumber>;

    "mixForChanging()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "exists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    V1(overrides?: CallOverrides): Promise<BigNumber>;

    "V1()"(overrides?: CallOverrides): Promise<BigNumber>;

    mixForDeleting(overrides?: CallOverrides): Promise<BigNumber>;

    "mixForDeleting()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    named(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "named(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    names(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "names(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(address,uint256,string)"(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mixForChanging(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mixForChanging()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    V1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "V1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mixForDeleting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mixForDeleting()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    named(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "named(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    names(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "names(address,uint256)"(
      nft: string,
      mateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(address,uint256,string)"(
      nft: string,
      mateId: BigNumberish,
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
